/** 
 * 
 **/

//server libraries
// const utils = require('../../../../../server/util/utils.js');
// const logger = utils.logger() // logger object

//operation object
const operation = {
    details : {
        description: "Standard retrieve operation for <%= model %>"
    },
    /** 
     * 
     * Header configuration requirement
     * modify this based on the requirements
     * 
     * 
    */
    headerConfig : {},
    /** 
     * 
     * Input data validation
     * modify this based on the requirements
     * 
     * 
    */
    inputValidation : function(data)
    {
        var check = true;
        return check;
    },
    //operation object
    loadWebOperation: function(serviceManager, httpObj)
    {
        //operation implementation
        
        /** 
         * 
         * OPERATION IMPLEMENTATION STARTS HERE
         * 
         * 
        */
        
        let resourceName = '<%= model %>';

        var handler = function(response){
            httpObj.responseData = {"data":response.data}; //set the response data
            httpObj.completeHttpResponse(httpObj); // respond to the http call   
        }

        let inCrit = {};
        //check if there is any input criteria for query
        if(typeof httpObj.request.body !== 'undefined'
            && Object.keys(httpObj.request.body).length > 0)
        { // if there is input query
            inCrit.where = httpObj.request.body;
        }

        //check if there is any input criteria for limit
        if(typeof httpObj.request.query.limit !== 'undefined'
            && /^\+?\d+$/.test(httpObj.request.query.limit))
        { // if there is input limit
            inCrit.limit = parseInt(httpObj.request.query.limit, 10);
        }

        //check if there is any input criteria for offset
        if(typeof httpObj.request.query.offset !== 'undefined'
            && /^\+?\d+$/.test(httpObj.request.query.offset))
        { // if there is input offset
            inCrit.offset = parseInt(httpObj.request.query.offset, 10);
        }

        //check if there is any input criteria for group
        if(typeof httpObj.request.query.group !== 'undefined')
        { // if there is input group
            inCrit.offset = httpObj.request.query.group;
        }

        //check if there is any input criteria for attributes
        if(typeof httpObj.request.query.attributes !== 'undefined')
        { // if there is input attributes
            let attrs = httpObj.request.query.attributes.split(",");
            inCrit.attributes = attrs;
        }

        serviceManager.callOperation("resource", resourceName, "findOperation", 
                                        {inputCriteria:inCrit}, handler, httpObj.request.mcHeader);
        /** 
         * 
         * OPERATION IMPLEMENTATION ENDS HERE
         * 
         * 
        */
    }
    
}

module.exports = {
    operation:operation
};
